// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer;

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200731104933__initial")]
    partial class _initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Administratori");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            Ime = "admin",
                            IsSuperAdmin = true,
                            Prezime = "admin"
                        });
                });

            modelBuilder.Entity("BannedKupac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumDo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Razlog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Zauvijek")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BannedKupci");
                });

            modelBuilder.Entity("Dobavljac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Broj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dobavljaci");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Broj = "063323718",
                            Ime = "Samsung",
                            Mail = "dobavljac@dobavljac.com"
                        });
                });

            modelBuilder.Entity("Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostanskiBroj")
                        .HasColumnType("int");

                    b.Property<int>("ZupanijaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZupanijaId");

                    b.ToTable("Gradovi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Citluk",
                            PostanskiBroj = 88260,
                            ZupanijaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Siroki Brijeg",
                            PostanskiBroj = 88520,
                            ZupanijaId = 2
                        });
                });

            modelBuilder.Entity("Komentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KupacId")
                        .HasColumnType("int");

                    b.Property<int>("MobitelId")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KupacId");

                    b.HasIndex("MobitelId");

                    b.ToTable("Komentari");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datum = new DateTime(2020, 7, 31, 12, 49, 32, 727, DateTimeKind.Local).AddTicks(5831),
                            IsDeleted = false,
                            KupacId = 1,
                            MobitelId = 1
                        });
                });

            modelBuilder.Entity("Komponente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DobavljacID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KolicinaNaSkladistu")
                        .HasColumnType("int");

                    b.Property<double>("PreporucenaCijena")
                        .HasColumnType("float");

                    b.Property<int>("TipKomponenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DobavljacID");

                    b.HasIndex("TipKomponenteId");

                    b.ToTable("Komponente");
                });

            modelBuilder.Entity("Kupac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BannedKupacId")
                        .HasColumnType("int");

                    b.Property<string>("BrojMobitela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrojPokusaja")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumPokusaja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BannedKupacId");

                    b.HasIndex("GradId");

                    b.ToTable("Kupci");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojMobitela = "063525555",
                            BrojPokusaja = 0,
                            DatumPokusaja = new DateTime(2020, 7, 31, 12, 49, 32, 728, DateTimeKind.Local).AddTicks(4996),
                            Email = "kupac@kupac.com",
                            GradId = 1,
                            Ime = "kupac",
                            Prezime = "kupic"
                        });
                });

            modelBuilder.Entity("Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionDescriptor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Mobiteli", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<float>("DijagonalaEkrana")
                        .HasColumnType("real");

                    b.Property<bool>("EksternaMemorija")
                        .HasColumnType("bit");

                    b.Property<string>("Graficka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KapacitetBaterije")
                        .HasColumnType("int");

                    b.Property<string>("KratkiOpis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Megapikseli")
                        .HasColumnType("real");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperativniSustavId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PopustId")
                        .HasColumnType("int");

                    b.Property<string>("Procesor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProizvodjacId")
                        .HasColumnType("int");

                    b.Property<float>("Ram_Gb")
                        .HasColumnType("real");

                    b.Property<string>("Rezolucija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StanjeNaSkladistu")
                        .HasColumnType("int");

                    b.Property<int>("Tezina")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperativniSustavId");

                    b.HasIndex("PopustId");

                    b.HasIndex("ProizvodjacId");

                    b.ToTable("Mobiteli");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cijena = 1210.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "S10",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            PopustId = 1,
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 1,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 2,
                            Cijena = 1580.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "S20",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            PopustId = 1,
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 1,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 3,
                            Cijena = 990.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "S10 Lite",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            PopustId = 1,
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 1,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 4,
                            Cijena = 440.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "Redmi Note 9",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            PopustId = 1,
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 4,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 5,
                            Cijena = 1320.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "Pixel 4",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            PopustId = 1,
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 6,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 6,
                            Cijena = 2350.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "iPhone 11 pro",
                            OperativniSustavId = 2,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            PopustId = 1,
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 2,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 7,
                            Cijena = 1220.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "iPhone XR",
                            OperativniSustavId = 2,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 2,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 8,
                            Cijena = 880.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "iPhone 8",
                            OperativniSustavId = 2,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 2,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 9,
                            Cijena = 390.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "Honor 9",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 3,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 10,
                            Cijena = 990.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "Mate 30 Pro",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 3,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 11,
                            Cijena = 250.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "B26",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 7,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 12,
                            Cijena = 30.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "Classic c221",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 8,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 13,
                            Cijena = 430.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "42",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 5,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 14,
                            Cijena = 430.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "210",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 5,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        },
                        new
                        {
                            Id = 15,
                            Cijena = 670.0,
                            DijagonalaEkrana = 6.1f,
                            EksternaMemorija = true,
                            Graficka = "Ardent",
                            IsDeleted = false,
                            KapacitetBaterije = 3200,
                            KratkiOpis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća",
                            Megapikseli = 12.3f,
                            Naziv = "A71",
                            OperativniSustavId = 1,
                            Opis = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a.",
                            PopustId = 1,
                            Procesor = "Xenon A5G",
                            ProizvodjacId = 1,
                            Ram_Gb = 8f,
                            Rezolucija = "FULL HD IPS",
                            StanjeNaSkladistu = 10,
                            Tezina = 320
                        });
                });

            modelBuilder.Entity("Narudzba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Kanton")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KontaktTelefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KupacId")
                        .HasColumnType("int");

                    b.Property<string>("Opcina")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostanskiBroj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stanje")
                        .HasColumnType("int");

                    b.Property<double>("UkupnaCijena")
                        .HasColumnType("float");

                    b.Property<string>("Ulica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.HasIndex("KupacId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Narudzbe");
                });

            modelBuilder.Entity("Novosti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naslov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SadrzajTekst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Novosti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datum = new DateTime(2020, 7, 31, 12, 49, 32, 729, DateTimeKind.Local).AddTicks(1632),
                            Naslov = "Novi iPhone stigao u BiH",
                            SadrzajTekst = "ok mobitel",
                            ZaposlenikId = 1
                        });
                });

            modelBuilder.Entity("OperativniSustav", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Verzija")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("OperativniSustavi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Android",
                            Verzija = 11f
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "iOS",
                            Verzija = 13.4f
                        });
                });

            modelBuilder.Entity("Popusti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumDo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumOd")
                        .HasColumnType("datetime2");

                    b.Property<float>("PostotakPopusta")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Popusti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumDo = new DateTime(2020, 7, 31, 12, 49, 32, 726, DateTimeKind.Local).AddTicks(1312),
                            DatumOd = new DateTime(2020, 7, 31, 12, 49, 32, 722, DateTimeKind.Local).AddTicks(7406),
                            PostotakPopusta = 0.1f
                        });
                });

            modelBuilder.Entity("Poruka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumSlanja")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hitno")
                        .HasColumnType("bit");

                    b.Property<bool>("Procitano")
                        .HasColumnType("bit");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subjekt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Poruke");
                });

            modelBuilder.Entity("Proizvodjac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proizvodjaci");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Samsung"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Apple"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Huawei"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Xiaomi"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Nokia"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Google"
                        },
                        new
                        {
                            Id = 7,
                            Naziv = "CAT"
                        },
                        new
                        {
                            Id = 8,
                            Naziv = "YEZZ"
                        });
                });

            modelBuilder.Entity("Servis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CijenaUkupno")
                        .HasColumnType("float");

                    b.Property<DateTime>("DatumPrijema")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StanjeServisa")
                        .HasColumnType("int");

                    b.Property<int>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Servisi");
                });

            modelBuilder.Entity("Slika", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MobitelId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MobitelId");

                    b.ToTable("Slike");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MobitelId = 1,
                            Order = 1,
                            Path = "/Customer/slike/samsung.jpg"
                        },
                        new
                        {
                            Id = 2,
                            MobitelId = 2,
                            Order = 1,
                            Path = "/Customer/slike/samsungS20.jpg"
                        },
                        new
                        {
                            Id = 3,
                            MobitelId = 3,
                            Order = 1,
                            Path = "/Customer/slike/samsung_galaxy_a30.jpg"
                        },
                        new
                        {
                            Id = 4,
                            MobitelId = 4,
                            Order = 1,
                            Path = "/Customer/slike/redminote.jpg"
                        },
                        new
                        {
                            Id = 5,
                            MobitelId = 5,
                            Order = 1,
                            Path = "/Customer/slike/pixel4-2.jpg"
                        },
                        new
                        {
                            Id = 6,
                            MobitelId = 6,
                            Order = 1,
                            Path = "/Customer/slike/appiph11.jpg"
                        },
                        new
                        {
                            Id = 7,
                            MobitelId = 7,
                            Order = 1,
                            Path = "/Customer/slike/apple_iphone_xr.jpg"
                        },
                        new
                        {
                            Id = 8,
                            MobitelId = 8,
                            Order = 1,
                            Path = "/Customer/slike/iphone_8.jpg"
                        },
                        new
                        {
                            Id = 9,
                            MobitelId = 9,
                            Order = 1,
                            Path = "/Customer/slike/huawei_honor_9.jpg"
                        },
                        new
                        {
                            Id = 10,
                            MobitelId = 10,
                            Order = 1,
                            Path = "/Customer/slike/mate30pro.jpg"
                        },
                        new
                        {
                            Id = 11,
                            MobitelId = 11,
                            Order = 1,
                            Path = "/Customer/slike/catb26.jpg"
                        },
                        new
                        {
                            Id = 12,
                            MobitelId = 12,
                            Order = 1,
                            Path = "/Customer/slike/yezz_classic_c221.jpg"
                        },
                        new
                        {
                            Id = 13,
                            MobitelId = 13,
                            Order = 1,
                            Path = "/Customer/slike/nokia42.jpg"
                        },
                        new
                        {
                            Id = 14,
                            MobitelId = 14,
                            Order = 1,
                            Path = "/Customer/slike/nokia42.jpg"
                        },
                        new
                        {
                            Id = 15,
                            MobitelId = 15,
                            Order = 1,
                            Path = "/Customer/slike/nokia_210.png"
                        });
                });

            modelBuilder.Entity("SmsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Broj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dodatnisadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poruka")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmsLog");
                });

            modelBuilder.Entity("StavkaNarudzbe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("MobitelId")
                        .HasColumnType("int");

                    b.Property<int>("NarudzbaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MobitelId");

                    b.HasIndex("NarudzbaId");

                    b.ToTable("StavkeNarudzbe");
                });

            modelBuilder.Entity("StavkaServisa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KomponenteId")
                        .HasColumnType("int");

                    b.Property<int>("ServisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KomponenteId");

                    b.HasIndex("ServisId");

                    b.ToTable("StavkaServisa");
                });

            modelBuilder.Entity("TipKomponente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipKomponente");
                });

            modelBuilder.Entity("Zaposlenik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gradid")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ulica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Gradid");

                    b.ToTable("Zaposlenici");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Zaposlenik@zaposlenik.com",
                            Gradid = 1,
                            Ime = "Zaposlenik",
                            Prezime = "Zaposlenko",
                            Ulica = "markovac",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("Zupanija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zupanije");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Hercegovacko-Neretvanska"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Zapadno-Hercegovacka"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Administrator", b =>
                {
                    b.HasOne("DataAccessLayer.ApplicationUser", "ApplicationUser")
                        .WithMany("Administratori")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Grad", b =>
                {
                    b.HasOne("Zupanija", "Zupanija")
                        .WithMany("Grad")
                        .HasForeignKey("ZupanijaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Komentar", b =>
                {
                    b.HasOne("Kupac", "Kupac")
                        .WithMany("Komentar")
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mobiteli", "Mobitel")
                        .WithMany("Komentar")
                        .HasForeignKey("MobitelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Komponente", b =>
                {
                    b.HasOne("Dobavljac", "Dobavljac")
                        .WithMany("Komponente")
                        .HasForeignKey("DobavljacID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipKomponente", "TipKomponente")
                        .WithMany("Komponente")
                        .HasForeignKey("TipKomponenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Kupac", b =>
                {
                    b.HasOne("DataAccessLayer.ApplicationUser", "ApplicationUser")
                        .WithMany("Kupci")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BannedKupac", "BannedKupac")
                        .WithMany("Kupac")
                        .HasForeignKey("BannedKupacId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Grad", "Grad")
                        .WithMany("Kupac")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Mobiteli", b =>
                {
                    b.HasOne("OperativniSustav", "OperativniSustav")
                        .WithMany("Mobiteli")
                        .HasForeignKey("OperativniSustavId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Popusti", "Popust")
                        .WithMany()
                        .HasForeignKey("PopustId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Proizvodjac", "Prozivodjac")
                        .WithMany("Mobiteli")
                        .HasForeignKey("ProizvodjacId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Narudzba", b =>
                {
                    b.HasOne("Grad", null)
                        .WithMany("Narudzba")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Kupac", "Kupac")
                        .WithMany("Narudzba")
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zaposlenik", "Zaposlenik")
                        .WithMany("Narudzba")
                        .HasForeignKey("ZaposlenikId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Novosti", b =>
                {
                    b.HasOne("Zaposlenik", "Zaposlenik")
                        .WithMany("Novosti")
                        .HasForeignKey("ZaposlenikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Poruka", b =>
                {
                    b.HasOne("Administrator", "Administrator")
                        .WithMany("Poruka")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zaposlenik", "Zaposlenik")
                        .WithMany("Poruka")
                        .HasForeignKey("ZaposlenikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Servis", b =>
                {
                    b.HasOne("Zaposlenik", "Zaposlenik")
                        .WithMany("Servis")
                        .HasForeignKey("ZaposlenikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Slika", b =>
                {
                    b.HasOne("Mobiteli", "Mobitel")
                        .WithMany("Slika")
                        .HasForeignKey("MobitelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("StavkaNarudzbe", b =>
                {
                    b.HasOne("Mobiteli", "Mobitel")
                        .WithMany("StavkaNarudzbe")
                        .HasForeignKey("MobitelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Narudzba", "Narudzba")
                        .WithMany("StavkaNarudzbe")
                        .HasForeignKey("NarudzbaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("StavkaServisa", b =>
                {
                    b.HasOne("Komponente", "Komponente")
                        .WithMany("StavkaServisa")
                        .HasForeignKey("KomponenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Servis", "Servis")
                        .WithMany("StavkaServisa")
                        .HasForeignKey("ServisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Zaposlenik", b =>
                {
                    b.HasOne("DataAccessLayer.ApplicationUser", "ApplicationUser")
                        .WithMany("Zaposlenici")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Grad", "Grad")
                        .WithMany("Zaposlenik")
                        .HasForeignKey("Gradid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
